esphome:
  name: dashboard
  name_add_mac_suffix: true
  includes:
    - utils.h
  on_boot:
    priority: 0
    then:
      - component.update: inkplate_display

preferences:
  flash_write_interval: 10min

esp32:
  board: esp-wrover-kit
  framework:
    type: arduino

# Enable logging
logger:
  #level: VERBOSE

# Enable Home Assistant API
api:
  password: ""

ota:
  platform: esphome
  password: ""

web_server:
  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dashboard Fallback Hotspot"
    password: ""

captive_portal:

i2c:

mcp23017:
  - id: mcp23017_hub
    address: 0x20

power_supply:
  - id: backlight_power
    keep_on_time: 0.2s
    enable_time: 0s
    pin:
      mcp23xxx: mcp23017_hub
      number: 11

output:
  - platform: mcp47a1
    id: backlight_brightness_output
    power_supply: backlight_power

light:
  - platform: monochromatic
    output: backlight_brightness_output
    id: backlight
    restore_mode: ALWAYS_OFF
    default_transition_length: 0.2s
    name: "Backlight"

script:
  - id: backlight_script
    mode: restart
    then:
      - light.turn_on: backlight
      - delay: 4s
      - light.turn_off:
          id: backlight
          transition_length: 1s

switch:
  - platform: restart
    name: "Reboot"
    id: reboot

  - platform: gpio
    id: battery_read_mosfet
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 9
      inverted: true

  - platform: gpio
    name: "Touchscreen Enabled"
    internal: true
    restore_mode: ALWAYS_ON
    pin:
      mcp23xxx: mcp23017_hub
      number: 12
      inverted: true
      mode: output

time:
  - platform: homeassistant
    id: esptime
    timezone: America/Los_Angeles

text_sensor:
  - platform: template
    name: "Battery Status"
    id: battery_status
    update_interval: never

sensor:
  - platform: adc
    id: battery_voltage_raw
    update_interval: never
    attenuation: 11db
    pin: 35
  - platform: template
    id: battery_voltage
    name: "Battery Voltage"
    accuracy_decimals: 3
    device_class: "voltage"
    state_class: "measurement"
    unit_of_measurement: "V"
    update_interval: 10min
    lambda: |-
      id(battery_read_mosfet).turn_off();
      delay(1);
      float adc = id(battery_voltage_raw).sample();
      id(battery_read_mosfet).turn_on();
      return adc;
    filters:
      - multiply: 2
    on_value_range:
      - above: 4
        then:
          - light.turn_off: backlight
          - text_sensor.template.publish:
              id: battery_status
              state: "HIGH"
          - component.update: inkplate_display
      - below: 4.001
        above: 3.6
        then:
          - light.turn_off: backlight
          - text_sensor.template.publish:
              id: battery_status
              state: "MEDIUM"
          - component.update: inkplate_display
      - below: 3.599
        above: 3.4
        then:
          - light.turn_off: backlight
          - text_sensor.template.publish:
              id: battery_status
              state: "LOW"
          - component.update: inkplate_display
      - below: 3.399
        then:
          - light.turn_off: backlight
          - text_sensor.template.publish:
              id: battery_status
              state: "EMPTY"
          - component.update: inkplate_display

binary_sensor:
  - platform: status
    name: "System Status"
    id: system_status
    on_state:
      then:
        - component.update: inkplate_display

  - platform: template
    id: kitchen_bright
    on_press:
      then:
        - homeassistant.service:
            service: button.press
            data:
              entity_id: button.main_kitchen_position_1_keypad_bright

  - platform: template
    id: kitchen_dim
    on_press:
      then:
        - homeassistant.service:
            service: button.press
            data:
              entity_id: button.main_kitchen_position_1_keypad_dim

  - platform: template
    id: kitchen_off
    on_press:
      then:
        - homeassistant.service:
            service: button.press
            data:
              entity_id: button.main_kitchen_position_1_keypad_off

  - platform: template
    id: kitchen_dining
    on_press:
      then:
        - homeassistant.service:
            service: button.press
            data:
              entity_id: button.main_kitchen_position_1_keypad_dining

  - platform: template
    id: living_bright
    on_press:
      then:
        - homeassistant.service:
            service: button.press
            data:
              entity_id: button.main_patio_sliding_doors_position_1_keypad_on

  - platform: template
    id: living_dim
    on_press:
      then:
        - homeassistant.service:
            service: button.press
            data:
              entity_id: button.main_patio_sliding_doors_position_1_keypad_dim

  - platform: template
    id: living_off
    on_press:
      then:
        - homeassistant.service:
            service: button.press
            data:
              entity_id: button.main_patio_sliding_doors_position_1_keypad_off

  - platform: template
    id: open_blinds
    on_press:
      then:
        - homeassistant.service:
            service: automation.trigger
            data:
              entity_id: automation.open_blinds

  - platform: template
    id: close_blinds
    on_press:
      then:
        - homeassistant.service:
            service: automation.trigger
            data:
              entity_id: automation.close_blinds

font:
  #  - file: "helvetica.ttf"
  #    id: helvetica_96
  #    size: 96
  - file: "helvetica.ttf"
    id: helvetica_48
    size: 48
  - file: "helvetica.ttf"
    id: helvetica_32
    size: 32
  - file: "materialdesignicons-webfont.ttf"
    id: icons_90
    size: 90
    glyphs: # https://pictogrammers.github.io/@mdi/font/5.3.45/
      - "\U000F0335" # mdi-lightbulb
      - "\U000F111C" # mdi-window-shutter
      - "\U000F111E" # mdi-window-shutter-open
      - "\U000F025A" # mdi-food
      - "\U000F008E" # mdi-battery-outline
  - file: "materialdesignicons-webfont.ttf"
    id: icons_32
    size: 32
    glyphs: # https://pictogrammers.github.io/@mdi/font/5.3.45/
      - "\U000F12A3" # mdi-battery-high
      - "\U000F12A2" # mdi-battery-medium
      - "\U000F12A1" # mdi-battery-low
      - "\U000F008E" # mdi-battery-outline

touchscreen:
  - platform: ektf2232
    id: ts
    interrupt_pin: GPIO36
    rts_pin:
      mcp23xxx: mcp23017_hub
      number: 10
    on_touch:
      then:
        - script.execute: backlight_script

display:
  - platform: inkplate6
    id: inkplate_display
    model: inkplate_6_plus
    greyscale: true
    partial_updating: false
    update_interval: never

    ckv_pin: 32
    sph_pin: 33
    gmod_pin:
      mcp23xxx: mcp23017_hub
      number: 1
    gpio0_enable_pin:
      mcp23xxx: mcp23017_hub
      number: 8
    oe_pin:
      mcp23xxx: mcp23017_hub
      number: 0
    spv_pin:
      mcp23xxx: mcp23017_hub
      number: 2
    powerup_pin:
      mcp23xxx: mcp23017_hub
      number: 4
    wakeup_pin:
      mcp23xxx: mcp23017_hub
      number: 3
    vcom_pin:
      mcp23xxx: mcp23017_hub
      number: 5

    lambda: |-
      auto width = it.get_width();
      auto height = it.get_height();
      auto left_margin = 25;
      auto right_margin = 25;
      auto top_margin = 25;

      auto black = Color(0, 0, 0);
      auto red = Color(255, 0, 0);
      auto green = Color(0, 255, 0);
      auto white = Color(255, 255, 255);

      it.fill(COLOR_ON);

      /////////////////////////
      // Header row
      //it.strftime(margin, margin, id(helvetica_48), COLOR_OFF, TextAlign::TOP_LEFT, "%Y-%m-%d", id(esptime).now());
      //it.strftime(width-10, top_margin, id(helvetica_48), COLOR_OFF, TextAlign::TOP_RIGHT, "%H:%M", id(esptime).now());

      if (id(system_status).state) {
        it.print(width-right_margin-40, top_margin, id(helvetica_32), COLOR_OFF, TextAlign::TOP_RIGHT, "Online");
      } else {
        it.print(width-right_margin-40, top_margin, id(helvetica_32), COLOR_OFF, TextAlign::TOP_RIGHT, "Offline");
      }

      auto bat_status = id(battery_status).state;
      if (bat_status == "EMPTY") {
        it.print(width/2, height/2, id(icons_90), COLOR_OFF, TextAlign::CENTER, BATTERY_OUTLINE);
        return;
      } else {
        const char* bat_icon = BATTERY_OUTLINE;
        if (bat_status == "HIGH") {
          bat_icon = BATTERY_HIGH;
        } else if (bat_status == "MEDIUM") {
          bat_icon = BATTERY_MEDIUM;
        } else if (bat_status == "LOW") {
          bat_icon = BATTERY_LOW;
        }
        it.print(width-right_margin, top_margin, id(icons_32), COLOR_OFF, TextAlign::TOP_RIGHT, bat_icon);
      }

      /////////////////////////
      // Rows
      auto cell_size = 150;
      auto row_space = 250;

      static Row* kitchen = nullptr;
      static Row* living = nullptr;
      static Row* shades = nullptr;

      if (kitchen == nullptr) {
        kitchen = new Row(left_margin, top_margin, cell_size, "Kitchen");
        kitchen->add(new Button(LIGHTBULB, "Bright", id(kitchen_bright)));
        kitchen->add(new Button(LIGHTBULB, "Dim", id(kitchen_dim), red));
        kitchen->add(new Button(LIGHTBULB, "Off", id(kitchen_off), green));
        kitchen->add(new Button(FOOD, "Dining", id(kitchen_dining)));
        kitchen->layout(id(ts));

        living = new Row(left_margin, top_margin + row_space, cell_size, "Living Room");
        living->add(new Button(LIGHTBULB, "Bright", id(living_bright)));
        living->add(new Button(LIGHTBULB, "Dim", id(living_dim), red));
        living->add(new Button(LIGHTBULB, "Off", id(living_off), green));
        living->layout(id(ts));

        shades = new Row(left_margin, top_margin + 2*row_space, cell_size, "Shades");
        shades->add(new Button(SHADES_UP, "Up", id(open_blinds)));
        shades->add(new Button(SHADES_DOWN, "Down", id(close_blinds)));
        shades->layout(id(ts));
      }

      kitchen->render(it);
      living->render(it);
      shades->render(it);
